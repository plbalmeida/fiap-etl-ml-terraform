name: CI/CD

on: 
  push:
    branches: 
      - main
      - aws-academy

jobs:

  set-env:
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.read_action.outputs.action }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Terraform action from file
        id: read_action
        run: |
          ACTION=$(cat terraform_action.txt)
          echo "::set-output name=action::${ACTION}"
      
  destroy:
    needs: set-env
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/aws-academy') && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Removing files from S3 bucket in case of destroy command
        run: |
            aws s3 rm s3://s3-bucket-ipea-eia366-pbrent366/ --recursive
      
      - name: Terraform Init and Destroy Step Functions state machine
        run: |
          cd infra/stepfunctions
          terraform init
          terraform plan
          terraform destroy -auto-approve

      - name: Terraform Init and Destroy ECR repository
        run: |
          cd infra/ecr
          terraform init
          terraform plan
          terraform destroy -auto-approve

      - name: Terraform Init and Destroy Lambda function
        run: |
          cd infra/lambda
          terraform init
          terraform plan
          terraform destroy -auto-approve
      
      - name: Terraform Init and Destroy Glue jobs
        run: |
          cd infra/glue
          terraform init
          terraform plan
          terraform destroy -auto-approve

      - name: Terraform Init and Destroy S3 bucket
        run: |
          cd infra/s3
          terraform init
          terraform plan
          terraform destroy -auto-approve

  lint:
    needs: set-env
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install --upgrade pip && pip install -r requirements.txt

      - name: Run Flake8
        run: |
          flake8 ./src --ignore=E501

  test:
    needs: [set-env, lint]
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install --upgrade pip && pip install -r requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH=.
          pytest ./src/tests

  s3:
    needs: [set-env, test]
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init and Apply
        run: |
          cd infra/s3
          terraform init
          terraform plan
          terraform apply -auto-approve

  glue:
    needs: [set-env, test, s3]
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init and Apply
        run: |
          cd infra/glue
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Upload Python scripts to S3
        run: |
            aws s3 cp src/etl/ s3://s3-bucket-ipea-eia366-pbrent366/scripts/ --recursive --exclude "*" --include "*.py"

  ecr:
    needs: [set-env, test]
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init and Apply
        run: |
          cd infra/ecr
          terraform init
          terraform plan
          terraform apply -auto-approve
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
  
      - name: Build Docker image locally
        run: |
            docker build -t 413467296690.dkr.ecr.us-east-1.amazonaws.com/ecr-ipea-eia366-pbrent366:latest -f ./Dockerfile .
  
      - name: Push Docker image to Amazon ECR
        run: |
            docker push 413467296690.dkr.ecr.us-east-1.amazonaws.com/ecr-ipea-eia366-pbrent366:latest

  lambda:
    needs: [set-env, test]
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Zip Lambda function
        run: |
          cd src/lambda
          zip -r ../../infra/lambda/lambda_function.zip lambda_function.py
        working-directory: .

      - name: Terraform Init and Apply
        run: |
          cd infra/lambda
          terraform init
          terraform plan
          terraform apply -auto-approve

  stepfunctions:
    needs: [set-env, s3, glue, ecr, lambda]
    if: github.ref == 'refs/heads/main' && needs.set-env.outputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init and Apply
        run: |
          cd infra/stepfunctions
          terraform init
          terraform plan
          terraform apply -auto-approve